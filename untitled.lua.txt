Oct
function tomd5(str)
  return game:HttpGet('https://LiquidBounce.monnn1.repl.co/tomd5.php?in='..str)
end




if getgenv().team == nil or getgenv().team == "Pirates" then
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("SetTeam",
"Pirates")
elseif getgenv().team == "Marines" then
  game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("SetTeam",
  "Marines")
end




local lp = game.Players.LocalPlayer
local backpack = lp.Backpack:GetChildren()
local player = game.Players:GetPlayers()
local playerasstring = game.Players:GetChildren()
local lp = game.Players.LocalPlayer
local backpack = lp.Backpack:GetChildren()
local player = game.Players:GetPlayers()
local playerasstring = game.Players:GetChildren()
local defeated = {}
local m=Instance.new("Part",game.Players.LocalPlayer.Character);

        m.Size=Vector3.new(1,0.5,1);

        m.Name="Root";
        m.Anchored=true;
        m.Transparency=1;
        m.CanCollide=false;
        m.CFrame=game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame*CFrame.new(0,20,0);
function datasend(url, content)
  if url == nil then url = getgenv().callback['api-url'] end
    getbase = ''
    for i, v in pairs(content) do
      getbase = getbase..i..'='..v..'&'
      table.insert(content, 1)
      end
if content == nil then
  return game:HttpGet(url..'?'..getbase)
   end
end
function launch()
  print('li beta - launched')
  end

function topos(gotoCFrame) --- Tween

    pcall(function()

    if game.Players.LocalPlayer.Character.Humanoid.Health >= 0 then
        game.Players.LocalPlayer.Character.Humanoid.Sit = false
        game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
    if (game:GetService("Players")["LocalPlayer"].Character.HumanoidRootPart.Position - gotoCFrame.Position).Magnitude <= 200 then
        pcall(function() 
            tweenz:Cancel()
        end)
        game:GetService("Players")["LocalPlayer"].Character.HumanoidRootPart.CFrame = gotoCFrame
    else
        local tween_s = game:service"TweenService"
        local info = TweenInfo.new((game:GetService("Players")["LocalPlayer"].Character.HumanoidRootPart.Position - gotoCFrame.Position).Magnitude/325, Enum.EasingStyle.Linear)
         tween, err = pcall(function()
            tweenz = tween_s:Create(game.Players.LocalPlayer.Character["HumanoidRootPart"], info, {CFrame = gotoCFrame})
            tweenz:Play()
        end)
        if not tween then return err end
    end
    end
    function _TweenCanCle()
        tweenz:Cancel()
    end
    end)
end
function nogravity()
  game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
end
function Hop()
    local PlaceID = game.PlaceId
    local AllIDs = {}
    local foundAnything = ""
    local actualHour = os.date("!*t").hour
    local Deleted = false
    function TPReturner()
        local Site
        if foundAnything == "" then
            Site =
                game.HttpService:JSONDecode(
                game:HttpGet(
                    "https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100"
                )
            )
        else
            Site =
                game.HttpService:JSONDecode(
                game:HttpGet(
                    "https://games.roblox.com/v1/games/" ..
                        PlaceID .. "/servers/Public?sortOrder=Asc&limit=100&cursor=" .. foundAnything
                )
            )
        end
        local ID = ""
        if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
            foundAnything = Site.nextPageCursor
        end
        local num = 0
        for i, v in pairs(Site.data) do
            local Possible = true
            ID = tostring(v.id)
            if tonumber(v.maxPlayers) > tonumber(v.playing) then
                for _, Existing in pairs(AllIDs) do
                    if num ~= 0 then
                        if ID == tostring(Existing) then
                            Possible = false
                        end
                    else
                        if tonumber(actualHour) ~= tonumber(Existing) then
                            local delFile =
                                pcall(
                                function()
                                    AllIDs = {}
                                    table.insert(AllIDs, actualHour)
                                end
                            )
                        end
                    end
                    num = num + 1
                end
                if Possible == true then
                    table.insert(AllIDs, ID)
                    wait()
                    pcall(
                        function()
                            wait()
                            game:GetService("TeleportService"):TeleportToPlaceInstance(
                                PlaceID,
                                ID,
                                game.Players.LocalPlayer
                            )
                        end
                    )
                    wait(4)
                end
            end
        end
    end
    function Teleport()
        while wait() do
            pcall(
                function()
                    TPReturner()
                    if foundAnything ~= "" then
                        TPReturner()
                    end
                end
            )
        end
    end
    Teleport()
end
                
local lp = game.Players.LocalPlayer
local backpack = lp.Backpack:GetChildren()
local player = game.Players:GetPlayers()
local playerasstring = game.Players:GetChildren()
local defeated = {}
function refreshplayer()
  local player = game.Players:GetPlayers()
  table.insert(player, 1)
  local playerasstring = game.Players:GetChildren()
end
function refreshdefeated()
  local defeated = {}
end

function getTarget()
  for i, v in pairs(player) do
if v.Name == game.Players.LocalPlayer.Name then continue end
    return v
 end
end
function getHealth(entity)
  return tonumber(entity.Character.Humanoid.Health)
  end
function getDistanceFrom(p1, p2)
  return (p1 - p2).Magnitude
end
function click ()
wait(.1)
game:GetService('VirtualUser'):CaptureController()
game:GetService('VirtualUser'):ClickButton1(Vector2.new(1660,880))
end

function buso() 
    if(not(game.Players.LocalPlayer.Character:FindFirstChild('HasBuso')))then
local rel = game.ReplicatedStorage

        rel.Remotes.CommF_:InvokeServer('Buso')
    end
end

function keydown(use)

    game:GetService("VirtualInputManager"):SendKeyEvent(true,use,false,game.Players.LocalPlayer.Character.HumanoidRootPart)

    wait(.1)
    game:GetService("VirtualInputManager"):SendKeyEvent(false,use,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
end
function rand()
  num = math.random(1, 5)
  if num == 1 then return 'Z' end
  if num == 2 then return 'X' end
  if num == 3 then return 'C' end
  if num == 4 then return 'V' end
  if num == 5 then return 'F' end
end
function equiprandom()
  backpack = game.Players.LocalPlayer.Backpack: GetChildren ()
  game.Players.LocalPlayer.Character.Humanoid:EquipTool(backpack[math.random(0,3)])
    click()
  end
spawn(

    function()

        pcall(
            function()
                while wait() do
                    if _G.WalkWater then
                        if game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame.Y <= 1 then
                            if not game:GetService("Workspace"):FindFirstChild("Water") then
                                local Water = Instance.new("Part", game:GetService("Workspace"))
                                Water.Name = "Water"
                                Water.Size = Vector3.new(20, 0.5, 20)
                                Water.Anchored = true
                                Water.Material = "Neon"
                                Water.Color = _G.Color
                                game:GetService("Workspace").Water.CFrame =
                                    CFrame.new(
                                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame.X,
                                    game:GetService("Workspace").Camera["Water;"].CFrame.Y,
                                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame.Z
                                )
                            else
                                game:GetService("Workspace").Water.CFrame =
                                    CFrame.new(
                                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame.X,
                                    game:GetService("Workspace").Camera["Water;"].CFrame.Y,
                                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame.Z
                                )
                            end
                        elseif
                            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame.Y >= 1 and
                                game:GetService("Workspace"):FindFirstChild("Water")
                         then
                            game:GetService("Workspace"):FindFirstChild("Water"):Destroy()
                        end
                    else
                        if game:GetService("Workspace"):FindFirstChild("Water") then
                            game:GetService("Workspace"):FindFirstChild("Water"):Destroy()
                        end
                    end
                end
            end
        )
    end
)
--[[
  for i, v in pairs(game.Players.LocalPlayer.Backpack: GetChildren ()) do
for i2, v2 in pairs(game.Players.LocalPlayer.Backpack: GetChildren ()) do
    if v:IsA('Tool') and v.Name == v2.Name then
      continue
end
if v.Name == 'Agility' or v.Name == 'Awakening' then
  game.Players.LocalPlayer.Character.Humanoid:EquipTool(v) 
click()
end
  if math.random(1,2) == 1 then 
  
  break end

            end

           end 

                
        ]]
      _G.WalkWater = true

function hide(v)
 
    topos(v.Character.HumanoidRootPart.CFrame *
    CFrame.new(199, 199, 199))
end
function bighitbox(part)
  part.Size = Vector3.new(50,50,50)
  return true
end
function getPCFrame(p)
  return p.Character.HumanoidRootPart.CFrame
end
function supersmallhitbox(part)
  part.Size = Vector3.new(1,1,1)
  return true
end
function getPCFrame(p)
  return p.Character.HumanoidRootPart.CFrame
end
function getPVector3(p)
  return p.Character.HumanoidRootPart.Position
end
function checkrequire(p, target)
  if p.Character == nil or target.Character == nil then print('target or player  is not vaild') return false end
  if target.Name == game.Players.LocalPlayer.Name then print('name is match') return false end
  if getDistanceFrom(getPVector3(p), getPVector3(target)) > 35000 then
print('Player Distance is too big')
  return false end
return true
end
function getLookingPart(player)
  if player.Character ~= nil then
   return CFrame.new(lp.Character.Head.CFrame.Position + (lp.Character.Head.LookPosition *
   3))
  end
return false
end
function isDone(p)
  if tonumber(p.Character.Humanoid.Health) < 1 or
  tonumber(game.Players.LocalPlayer.Character.Humanoid.Health) < 1 then
  print (' true') return true end
return false 
end
for i, v in pairs(game.Players:GetPlayers()) do
_G.tick = 0
  if checkrequire(lp, v) then

  repeat wait()
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("EnablePvp")
    buso()
    print('Starting: '..v.Name)
    if v.Character ~= nil then 
    if getDistanceFrom(getPVector3(lp), getPVector3(v)) < 100 then
    
    _G.autospam = true
end
end
_G.v = v
spawn(function()
  if _G.v ~= nil then
    while _G.v ~= nil and wait() do
    if tonumber(game.Players.LocalPlayer.Character.Humanoid.Health) < 5000 then
  hide(v)
  else
if _G.v.Character ~=nil then 
topos(getPCFrame(_G.v))
end
  end
end
end
end)
spawn(function()
  if _G.autospam then
    while _G.autospam and wait() and not _G.stop do
if math.random(1,3) == 3 then
  
      equiprandom() 
      end
      keydown(rand()) 
end
end
end)
    supersmallhitbox(lp.Character.HumanoidRootPart)
    _G.tick = _G.tick + 1
    print(_G.tick)
  bighitbox(v.Character.HumanoidRootPart)
  
 
  until _G.tick > getgenv().timehunt
  end
print('loop reached')
_G.v = nil
_G.autospam = false
end
Hop()
repeat wait()
topos(CFrame.new(1000,5000000,1000))
until _G.unhop
wait(20)


